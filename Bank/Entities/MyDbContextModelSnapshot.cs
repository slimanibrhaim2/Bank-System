// <auto-generated />
using System;
using Bank.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bank.Models
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bank.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Bank.Models.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Bank.Models.TransactionType", b =>
                {
                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("Bank.Models.TransferBetweenAccount", b =>
                {
                    b.Property<string>("TransferId")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("TransferId")
                        .HasName("PK_TransferBetweenAccounts_1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransferBetweenAccounts");
                });

            modelBuilder.Entity("Bank.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Bank.Models.Account", b =>
                {
                    b.HasOne("Bank.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bank.Models.Transaction", b =>
                {
                    b.HasOne("Bank.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Accounts");

                    b.HasOne("Bank.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_TransactionTypes");

                    b.Navigation("Account");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Bank.Models.TransferBetweenAccount", b =>
                {
                    b.HasOne("Bank.Models.Account", "Recipient")
                        .WithMany("TransferBetweenAccounts")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK_TransferBetweenAccounts_Accounts");

                    b.HasOne("Bank.Models.Transaction", "Transaction")
                        .WithMany("TransferBetweenAccounts")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransferBetweenAccounts_Transaction");

                    b.Navigation("Recipient");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Bank.Models.Account", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("TransferBetweenAccounts");
                });

            modelBuilder.Entity("Bank.Models.Transaction", b =>
                {
                    b.Navigation("TransferBetweenAccounts");
                });

            modelBuilder.Entity("Bank.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Bank.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
